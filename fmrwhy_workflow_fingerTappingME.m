% A custom workflow that does structFunc and basicFunc preprocessing and QC fof a single subject in the NEUFEP study

% Code steps:
% 1. Define template/default variables, directories and filenames
% 2. Specify


%--------------------------------------------------------------------------

% Load/create required parameters
bids_dir = '/Users/jheunis/Desktop/KempCourse_data_organised/bids';

% Setup fmrwhy bids directories on workflow level
fmrwhy_defaults_setupDerivDirs(bids_dir);

% Grab default workflow params
wf_params = fmrwhy_defaults_workflow(bids_dir);

% Loop through subjects, sessions, tasks, runs, etc
sub = '111';

% Setup fmrwhy bids directories on subject level (this copies data from bids_dir)
fmrwhy_defaults_setupSubDirs(bids_dir, sub);

% Update workflow params with subject anatomical derivative filenames
wf_params = fmrwhy_defaults_subAnat(bids_dir, sub, wf_params);

% Loop through sessions, tasks, runs, etc
ses = '';
task = 'motor';
run = '1';
echo = '2';

% Update workflow params with subject functional derivative filenames
wf_params = fmrwhy_defaults_subFunc(bids_dir, sub, ses, task, run, echo, wf_params);

%%
% -------
% STEP 0 -- Create functional template
% -------
% Create, if it does not exist
if ~exist(wf_params.template_fn, 'file')
    disp(['Template funcional image does not exist yet. Creating now: ' wf_params.template_fn]);
    functional0_fn = fullfile(wf_params.func_dir_preproc, ['sub-' sub '_task-' wf_params.template_task '_run-' wf_params.template_run '_echo-' wf_params.template_echo '_bold.nii,1']);
    fmrwhy_util_saveNifti(wf_params.template_fn, spm_read_vols(spm_vol(functional0_fn)), functional0_fn, 'Template functional volume', 0)
else
    disp(['Template funcional image exists: ' wf_params.template_fn]);
end

%%
% -------
% STEP 1 -- Structural-functional preprocessing: fmrwhy_preproc_structFunc.m
% -------
struct_func_out_fns = [{wf_params.coregest_anatomical_fn} wf_params.probseg_fns wf_params.transform_fns wf_params.rall_fns wf_params.mask_fns];
run_structFunc = 0;
for i = 1:numel(struct_func_out_fns)
    if ~exist(struct_func_out_fns{i}, 'file')
        disp(['Structural-funcional preprocessing output file does not exist yet: ' struct_func_out_fns{i}]);
        run_structFunc = 1;
    end
end
if run_structFunc
    disp('Running complete structural-funcional preprocessing pipeline')
    fmrwhy_preproc_structFunc(bids_dir, sub, ses, wf_params.template_task, wf_params.template_run, wf_params.template_echo, wf_params);
    disp('Complete!')
    disp('---')
else
    disp('Structural-funcional preprocessing already completed.')
    disp('---')
end

%%
% -------
% STEP 2 -- Basic functional preprocessing: fmrwhy_preproc_basicFunc.m
% -------
basic_func_out_fns = {wf_params.motion_fn, wf_params.afunctional_fn, wf_params.rfunctional_fn, wf_params.rafunctional_fn, wf_params.sfunctional_fn, wf_params.srfunctional_fn, wf_params.srafunctional_fn};
run_basicFunc = 0;
for i = 1:numel(basic_func_out_fns)
    if ~exist(basic_func_out_fns{i}, 'file')
        disp(['Basic funcional preprocessing output file does not exist yet: ' basic_func_out_fns{i}]);
        run_basicFunc = 1;
    end
end
if run_basicFunc
    fmrwhy_preproc_basicFunc(bids_dir, sub, ses, task, run, echo, wf_params);
    disp('Complete!')
    disp('---')
else
    disp('Basic funcional preprocessing already completed.')
    disp('---')
end

%%
% -------
% STEP 3 -- Quality control pipeline: fmrwhy_qc_.m
% -------
% Step 2: quality-preproc - fmrwhy_qc_sub.m
%qc_out_fns; % some file that is generated by the qc procedure (subject level or run level?)
%run_qc = 0;
%for i = 1:numel(qc_out_fns)
%    if ~exist(qc_out_fns{i}, 'file')
%        disp(['Basic funcional preprocessing output file does not exist yet: ' qc_out_fns{i}]);
%        run_qc = 1;
%    end
%end
run_qc = 1;
if run_qc
    fmrwhy_qc_run(bids_dir, sub, ses, task, run, echo, wf_params);
    disp('Complete!')
    disp('---')
else
    disp('Basic funcional preprocessing already completed.')
    disp('---')
end

%%
% -------
% STEP 4 -- 1st level analysis
% -------
wf_params.sub_dir_stats = fullfile(wf_params.stats_dir, ['sub-' sub]);
func_dir_stats = fullfile(wf_params.sub_dir_stats, 'func');
if ~exist(func_dir_stats, 'dir')
    mkdir(func_dir_stats)
end

% Set up statistical design parameters, based on task data
% Load multiple confound regressors
confounds_struct = tdfread(wf_params.confounds_fn);
confounds_mat = struct2array(confounds_struct);
new_confounds_mat = confounds_mat(:,1:(end-1)); % ignore global signal regressor
if isempty(find(confounds_struct.framewise_displacement_censor))
    new_confounds_mat(:,8) = []; % remove censoring regressor if there are no censored volumes
end
new_confounds_mat(:,7) = []; % remove fd as a regressor
new_confounds_fn = fullfile(func_dir_stats, ['sub-' sub '_task-' task '_run-' run '_desc-GLM_regressors.txt']);

dlmwrite(new_confounds_fn, new_confounds_mat, 'delimiter', '\t', 'precision', '%1.7e')

%% CREATE MODEL
sess_params = wf_params.tasks.motor.sess_params;
fmrwhy_batch_specify1stlevel(func_dir_stats, wf_params.srafunctional_fn, new_confounds_fn, sess_params)
load([func_dir_stats filesep 'SPM.mat']);
%% ESTIMATE MODEL
fmrwhy_batch_estimate1stlevel(func_dir_stats)
%% SETUP TASK CONTRAST
[Ntt, Nregr] = size(SPM.xX.X);
contrast_params = struct;
contrast_params.weights = zeros(1, Nregr);
contrast_params.weights(1) = 1;
contrast_params.name = 'Fingertapping';
fmrwhy_batch_contrast1stlevel(func_dir_stats, contrast_params)
%% RUN RESULTS
fmrwhy_batch_threshold1stlevel(func_dir_stats)
% [SPM,xSPM] = spm_getSPM(fullfile(func_dir_stats, 'SPM.mat'));
toc;